name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Lint and validate HTML/CSS/JS
  lint:
    runs-on: ubuntu-latest
    name: Lint Code
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm init -y
        npm install --save-dev eslint htmlhint stylelint
    
    - name: Lint HTML
      run: npx htmlhint "*.html"
      continue-on-error: true
    
    - name: Lint JavaScript
      run: npx eslint "*.js" --max-warnings 0
      continue-on-error: true

  # Test game functionality
  test:
    runs-on: ubuntu-latest
    name: Test Game
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install test dependencies
      run: |
        npm init -y
        npm install --save-dev playwright
    
    - name: Install Playwright browsers
      run: npx playwright install
    
    - name: Run basic game tests
      run: |
        cat > test-game.js << 'EOF'
        const { chromium } = require('playwright');
        const path = require('path');
        
        (async () => {
          const browser = await chromium.launch();
          const page = await browser.newPage();
          
          // Load the game
          await page.goto('file://' + path.resolve('./index.html'));
          
          // Wait for game to initialize
          await page.waitForTimeout(1000);
          
          // Check if canvas exists
          const canvas = await page.$('#gameCanvas');
          if (!canvas) {
            throw new Error('Game canvas not found');
          }
          
          // Check if game object exists
          const gameExists = await page.evaluate(() => {
            return typeof game !== 'undefined';
          });
          
          if (!gameExists) {
            throw new Error('Game object not initialized');
          }
          
          console.log('‚úÖ Game loaded successfully');
          console.log('‚úÖ Canvas element found');
          console.log('‚úÖ Game object initialized');
          
          await browser.close();
        })();
        EOF
        node test-game.js

  # Build and deploy preview
  deploy-preview:
    runs-on: ubuntu-latest
    name: Deploy Preview
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create deployment package
      run: |
        mkdir -p dist
        cp *.html *.js dist/
        echo "Preview build created"
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: game-preview
        path: dist/

  # Security scan
  security:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        # Check for common security issues in web files
        echo "üîç Scanning for security issues..."
        
        # Check for potential XSS vulnerabilities
        if grep -r "innerHTML\|eval\|document.write" *.js *.html; then
          echo "‚ö†Ô∏è  Potential XSS vulnerabilities found"
        else
          echo "‚úÖ No obvious XSS vulnerabilities detected"
        fi
        
        # Check for external dependencies
        if grep -r "https\?://" *.js *.html | grep -v "localhost"; then
          echo "‚ö†Ô∏è  External dependencies found - review for security"
        else
          echo "‚úÖ No external dependencies detected"
        fi
        
        echo "Security scan completed"